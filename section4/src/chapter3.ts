/*
함수 오버로딩

 같은 함수를 매개변수의 개수나 타입에 따라 여러가지 버전으로 만드는 문법이다.

 함수의 구현부가 없이 선언문만 써 놓는 것을 오버로드 시그니쳐라고 하며 각각의 선언문이 함수의 버전을 의미한다.

 실제 함수 구현부의 구현된 매개변수의 개수나 타입을 따라가는 것이 아닌 오버로드 시그니쳐 중 하나의 버전을 따라간다.

 오버로드 시그니쳐를 만들었다면 다음으로는 구현 시그니쳐를 만들어줘야 한다. 구현 시그니쳐는 실제로 함수가 어떻게 실행될 것인지를 정의하는 부분이다.

 구현 시그니쳐의 매개변수 타입은 모든 오버로드 시그니쳐와 호환되도록 만들어야 한다.

 예시)
 -> 하나의 함수 func를 만들고 모든 매개변수는 넘버타입으로 정의한다.
 -> Ver1. 매개변수가 1개일 때에는 매개변수에 20을 곱한 값을 출력
 -> Ver2. 매개변수가 3개일 때에는 모든 매개변수를 더한 값을 출력

*/



// 버전들 -> 오버로드 시그니쳐
function func(a: number): void;
function func(a: number, b: number, c: number): void;

// 실제 구현부 -> 구현 시그니쳐
function func(a: number, b?: number, c?: number) {
    if (typeof b === "number" && typeof c === "number") {
      console.log(a + b + c);
    } else {
      console.log(a * 20);
    }
  }
  
  func(1);        // ✅ 버전 1 - 오버로드 시그니쳐
//   func(1, 2);     // ❌ 
  func(1, 2, 3);  // ✅ 버전 3 - 오버로드 시그니쳐